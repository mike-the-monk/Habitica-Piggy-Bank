// This code is licensed under the same terms as Habitica:
  // https://raw.githubusercontent.com/HabitRPG/habitrpg/develop/LICENSE

/* ========================================== */
/* [Users] Required script data to fill in    */
/* ========================================== */
const USER_ID = "PasteYourUserIdHere";
const API_TOKEN = "PasteYourApiTokenHere"; // Do not share this to anyone
const WEB_APP_URL = "PasteGeneratedWebAppUrlHere";

/* ========================================== */
/* [Users] Required customizations to fill in */
/* ========================================== */

/* ========================================== */
/* [Users] Optional customizations to fill in */
/* ========================================== */

/* ========================================== */
/* [Users] Do not edit code below this line   */
/* ========================================== */
const AUTHOR_ID = "30aac9fe-60e6-4dd5-8ccf-ee3844d46409";
const SCRIPT_NAME = "Piggy Bank";
const HEADERS = {
  "x-client" : AUTHOR_ID + " - " + SCRIPT_NAME,
  "x-api-user" : USER_ID,
  "x-api-key" : API_TOKEN,
}

const scriptProperties = PropertiesService.getScriptProperties(); // Constants can have properties changed

const NEW_NOTES_START = "Goal amount: ";
const NEW_NOTES_MIDDLE = "; Amount saved towards goal: ";
const NEW_NOTES_END = ";";

const PIGGY_BANK_CREATE_TITLE = "Piggy Bank"
const PIGGY_BANK_CREATE_TEXT = "Create a new Piggy Bank button with the parameters below";
const PIGGY_BANK_CREATE_ALIAS = "piggyBankCreate";
const PIGGY_BANK_CREATE_NOTES = "+ Piggy Bank Title: title ;\n+ Goal amount: 10000 ;\n+ Reward amount to purchase incrementally: 100;"; // doing it this way creates the three items as a bulleted list (that's what the plus sign is for) and line break is created by the character '\n'
const PIGGY_BANK_CREATE_VALUE = "0";

const SEARCH_TERM_GOAL = "Goal amount:"; // Offset will be 12 when using this one
const SEARCH_TERM_AMOUNT_SAVED = "Amount saved towards goal:"; // Offset will be 26 
const SEARCH_TERM_TITLE = "Piggy Bank Title:"; // Offset will be 17
const SEARCH_TERM_INCREMENT = "Reward amount to purchase incrementally:"; // Offset will be 40
const SEARCH_TERM_SHOULD_DELETE_BUTTON = ""; // FILL IN LATER

// any new Piggy Bank buttons will have an alias that starts with the same base but adds a number at the end
const PIGGY_BANK_ALIAS_BASE = "piggyBank";

const INTEGER_COUNTER_KEY = "INTEGER_COUNTER_KEY";
var integerCounterKey = "";

// Error messages
const ERROR_MSG_FUNCTION_CHECK_STRING_FORMATTING = "Error with function `checkStringFormatting`, please contact author of the script to troubleshoot.";
const ERROR_MSG_FUNCTION_CHECK_SEARCH_TERMS = "Error with function `checkSearchTerms`, please contact author of the script to troubleshoot.";
const ERROR_MSG_FUNCTION_CHECK_SEMICOLONS = "Error with function `checkSemicolons`, please contact author of the script to troubleshoot.";
const ERROR_MSG_FUNCTION_CHECK_ORDER = "Error with function `checkOrder`, please contact author of the script to troubleshoot.";

function doOneTimeSetup() { 
  // create button

  // Build button
const PIGGY_BANK_CREATE_BUTTON = {
    "text": PIGGY_BANK_CREATE_TITLE,
    "type": "reward",
    "alias": PIGGY_BANK_CREATE_ALIAS,
    "notes": PIGGY_BANK_CREATE_NOTES,
    "value": PIGGY_BANK_CREATE_VALUE, // GP value for the reward will be whatever they set it, which is nice
  }
  api_createNewTaskForUser([PIGGY_BANK_CREATE_BUTTON]);
  
  // create the webhook
  const options = {
    "scored" : true,
  }
  const payload = {
    "url" : WEB_APP_URL,
    "label" : SCRIPT_NAME + " Webhook",
    "type" : "taskActivity",
    "options" : options,
  }
  apiMult_createNewWebhookNoDuplicates(payload);
  
  // set script properties so they carry over to next session
  initScriptProperties();
}
 
  // do things when the webhook runs
function doPost(e) {
  const dataContents = JSON.parse(e.postData.contents);
  const type = dataContents.type;
  const task = dataContents.task;
  
  if (type == "scored") {
    // Sanitize task alias
    let aliasString = "";
    if ((task.alias != undefined) || (task.alias != null)) {
      aliasString = task.alias;
    }

    // All of the Piggy Bank buttons will have an alias that begins with "piggyBank" (which is saved as PIGGY_BANK_ALIAS_BASE)
    // Check if the alias of the button that was clicked includes PIGGY_BANK_ALIAS_BASE or not
    let includesBaseAlias = aliasString.includes(PIGGY_BANK_ALIAS_BASE);
    
    // Only run rest of script if true
    if (includesBaseAlias) {
      let notes = "initial value";
      notes = task.notes;

      // Find index locations for each search term
      let indexGoal = findIndex(SEARCH_TERM_GOAL, notes);
      let indexAmountSaved = findIndex(SEARCH_TERM_AMOUNT_SAVED, notes);
      let indexTitle = findIndex(SEARCH_TERM_TITLE, notes);
      let indexIncrement = findIndex(SEARCH_TERM_INCREMENT, notes);
      //let indexShouldDelete = findIndex(SEARCH_TERM_SHOULD_DELETE_BUTTON, notes);

      // Switch-case is based on task alias
      switch (aliasString) {
        
        case PIGGY_BANK_CREATE_ALIAS: // If user clicked the Create button, take the relevant actions
          doPiggyBankCreateButton(notes, indexGoal, indexAmountSaved, indexTitle, indexIncrement);
          break;
        
        default: // If user clicked one of their own Piggy Bank buttons, take the relevant actions
          // Grab GP value of button
          let gpValue = task.value;
          
          doUpdatePiggyBankButon(gpValue, notes, indexGoal, indexAmountSaved, indexTitle, indexIncrement)
          break;
      }
    }
  }
  return HtmlService.createHtmlOutput();
}

function doPiggyBankCreateButton(notes, indexGoal, indexAmountSaved, indexTitle, indexIncrement){
  // Check if string is formatted correctly, send error messages if not.
  let correctFormatCreate = checkStringFormtting(notes, "create", indexGoal, indexAmountSaved, indexTitle, indexIncrement);
  
  api_sendPrivateMessageAlways({"message" : "correctFormatCreate is " + correctFormatCreate, "toUserId" : USER_ID});

  if (correctFormatCreate) {
    // Find semicolons after each relevant search term
    let indexTitleSemicolon = findIndexSemicolon(notes, indexTitle, 17);
    let indexGoalSemicolonCreate = findIndexSemicolon(notes, indexGoal, 12);
    let indexIncrementSemicolon = findIndexSemicolon(notes, indexIncrement, 40);

    // Split into substrings
    let title = createSubstring(notes, indexTitle, indexTitleSemicolon);
    let goalTemp = createSubstring(notes, indexGoal, indexGoalSemicolonCreate);
    let incrementTemp = createSubstring(notes, indexIncrement, indexIncrementSemicolon);

    // Check if numeric ones are numbers
    let goalIsNumber = checkIfNumber(goalTemp);
    let incrementIsNumber = checkIfNumber(incrementTemp);
    
    if (goalIsNumber && incrementIsNumber) {
      // Save numeric values as numbers
      let goal = parseFloat(goalTemp);
      let increment = parseFloat(incrementTemp);
            
      // Create notes section for button
      let newNotes = NEW_NOTES_START + goal + NEW_NOTES_MIDDLE + "0" + NEW_NOTES_END;
            
      // Task alias needs an integer appended to it; Habitica doesn't allow two tasks with the same alias.
      // Retrieve saved integer.
      var integerCounterKey = INTEGER_COUNTER_KEY;
      var integerCounterPrev = Number(scriptProperties.getProperty(integerCounterKey));

      // Increment by 1. Save new value.
      var integerCounterNew = integerCounterPrev++;
      scriptProperties.setProperty(integerCounterKey, integerCounterNew);
            
      // Convert new value to string
      let integerCounterAsString = integerCounterNew.toString();
            
      // Append to end of base alias
      let newAlias = PIGGY_BANK_ALIAS_BASE + integerCounterAsString;

      // Build button
      const PIGGY_BANK_NEW_BUTTON = {
        "text": title,
        "type": "reward",
        "alias": newAlias,
        "notes": newNotes,
        "value": increment, // GP value for the reward will be whatever they set it, which is nice
      }

      // Create button
      api_createNewTaskForUser([PIGGY_BANK_NEW_BUTTON]);
    } else {
      // ERROR MESSAGE, YOU DIDN'T ENTER A NUMBER
    }
  }
}

function doUpdatePiggyBankButon(gpValue, notes, indexGoal, indexAmountSaved, indexTitle, indexIncrement){
  // Habitica has already checked if they have enough GP, so no need to do it here

  // Check if button should be deleted 
  // NOTES OF BUTTON SHOULD SOMEHOW INDICATE THIS, THEN FLIP BOOLEAN
  let shouldDeleteButton = false;
  // if (conditions) { shouldDeleteButton = true; }

  if (shouldDeleteButton) {
    // DELETE THE TASK AND REFUND THEIR GP
  } else {
    // Check if string is formatted correctly, sends error messages if not.
    let correctFormatDeposit = checkStringFormtting(notes, "deposit", indexGoal, indexAmountSaved, indexTitle, indexIncrement);

    if (correctFormatDeposit) {
      // Find semicolons after each relevant search term
      let indexGoalSemicolonDeposit = findIndexSemicolon(string, indexGoal, 12);
      let indexAmountSavedSemicolon = findIndexSemicolon(string, indexAmountSaved, 26);
            
      // Split into substrings
      let goalDepositTemp = createSubstring(notes, indexGoal, indexGoalSemicolonDeposit);
      let amountSavedTemp = createSubstring(notes, indexAmountSaved, indexAmountSavedSemicolon);
            
      // Check if they are numbers
      let goalDepositIsNumber = checkIfNumber(goalDepositTemp);
      let amountSavedIsNumber = checkIfNumber(amountSavedTemp);

      if (goalDepositIsNumber && amountSavedIsNumber) {
        // Save as numbers
        let goalDeposit = parseFloat(goalDepositTemp);
        let amountSaved = parseFloat(amountSavedTemp);

        // Add GP value to amount saved
        let newAmountSaved = amountSaved + gpValue;
              
        // Check if new amount saved exceeds goal
        if (newAmountSaved >= goalAmount) {
          // DO VICTORY THINGS
          // UPDATE BUTTON, INCLUDING A WAY TO CHECK IF BUTTON SHOULD BE DELETED
        } else {
          // Create updated notes section for button
          // let updatedNotes = NEW_NOTES_START + goalDeposit + NEW_NOTES_MIDDLE + newAmountSaved + NEW_NOTES_END;
                
          // UPDATE BUTTON
        }
      } else {
        // ERROR MESSAGE - YOU DIDN'T ENTER A NUMBER
      }
    }
  }
}

// Create custom reward buttons
function api_createNewTaskForUser(payload) {
  var params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload), // Rightmost button goes on top
    "muteHttpExceptions" : true,
  }

  var url = "https://habitica.com/api/v3/tasks/user";
  UrlFetchApp.fetch(url, params);
}

// Create a webhook if no duplicate exists
function apiMult_createNewWebhookNoDuplicates(payload) {
  const response = api_getWebhooks();
  const webhooks = JSON.parse(response).data;
  var duplicateExists = 0;
    
  for (var i in webhooks) {
    if (webhooks[i].label == payload.label) {
      duplicateExists = 1;
    }
  }
  // If webhook to be created doesn't exist yet
  if (!duplicateExists) {
    api_createNewWebhook(payload);
  }
}

// Used to see existing webhooks, and therefore if there's a duplicate
function api_getWebhooks() {
  const params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  const url = "https://habitica.com/api/v3/user/webhook";
  return UrlFetchApp.fetch(url, params);
}

// Creates a webhook (as part of the "don't make it if there's a duplicate" function)
function api_createNewWebhook(payload) {
  const params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
   
  const url = "https://habitica.com/api/v3/user/webhook";
  return UrlFetchApp.fetch(url, params);
}

// Sets initial properties that will be used/saved later.
function initScriptProperties() {
  scriptProperties.setProperty(INTEGER_COUNTER_KEY, 0);
}

function findIndex(searchTerm, stringToSearch) {
  return stringToSearch.indexOf(searchTerm);
}

// Finds the semicolon after the search term previously searched. Builds in an offset to account for the number of characters in the search term.
function findIndexSemicolon(stringToSearch, startingAt, offset) {
  return stringToSearch.indexOf(";", startingAt + offset);
}

// Confirms string has correct format and number of semicolons. If not, other functions send the error messages.
function checkStringFormtting(string, version, indexGoal, indexAmountSaved, indexTitle, indexIncrement) {
  // Check if all relevant search terms are present
  let allPresent = checkSearchTerms(version, indexGoal, indexAmountSaved, indexTitle, indexIncrement);
  
  if (allPresent) {
    // Check if all terms and semicolons are present and in the correct order
    let correctSemicolons = checkSemicolons(string, version, indexGoal, indexAmountSaved, indexTitle, indexIncrement);
    
    if (correctSemicolons) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

// Checks if all of the relevant search terms are present. Sends error message if not.
function checkSearchTerms(version, indexGoal, indexAmountSaved, indexTitle, indexIncrement) {
  if (version == "create") {
    if ( (indexTitle != -1) &&  (indexGoal != -1) && (indexIncrement != -1) ) {
      return true;
    } else {
      // CREATE ERROR MESSAGE ABOUT HOW NOT ALL SEARCH TERMS ARE PRESENT.
      // GIVE AN EXAMPLE OF WHAT'S EXPECTED (TITLE, ETC.)
      return false;
    }
  } else if (version == "deposit") {
    if ( (indexGoal != -1) && (indexAmountSaved != -1) ) {
      return true;
    } else {
      // CREATE ERROR MESSAGE ABOUT HOW NOT ALL SEARCH TERMS ARE PRESENT.
      // GIVE AN EXAMPLE OF WHAT'S EXPECTED (GOAL AND AMOUNT SAVED)
      return false;
    }
  } else { // This condition shouldn't be possible
    api_sendPrivateMessageAlways({"message" : ERROR_MSG_FUNCTION_CHECK_SEARCH_TERMS, "toUserId" : USER_ID});
  }
}

// Checks if enough semicolons are present and if they're in the correct locations. Sends error message if not.
function checkSemicolons(string, version, indexGoal, indexAmountSaved, indexTitle, indexIncrement) {
  if (version == "create") {
    // Find semicolons after each relevant search term
    let indexTitleSemicolon = findIndexSemicolon(string, indexTitle, 17);
    let indexGoalSemicolonCreate = findIndexSemicolon(string, indexGoal, 12);
    let indexIncrementSemicolon = findIndexSemicolon(string, indexIncrement, 40);
    
    // Are all expected semicolons present?
    if ( (indexTitleSemicolon != -1) &&  (indexGoalSemicolonCreate != -1) && (indexIncrementSemicolon != -1) ) {
      // Now check for correct order
      let correctOrderCreate = checkOrder(6, indexTitle, indexTitleSemicolon, indexGoal, indexGoalSemicolonCreate, indexIncrement, indexIncrementSemicolon);
      if (correctOrderCreate) {
        return true;
      } else {
        // SEND ERROR MESSAGE - THINGS AREN'T IN THE RIGHT ORDER. GIVE AN EXAMPLE OF WHAT'S EXPECTED.
        return false;
      }
    } else {
      // SEND ERROR MESSAGE - NOT ENOUGH SEMICOLONS. GIVE AN EXAMPLE OF WHAT'S EXPECTED.
      return false;
    }
    
  } else if (version == "deposit") {
    // Find semicolons after each relevant search term
    let indexGoalSemicolonDeposit = findIndexSemicolon(string, indexGoal, 12);
    let indexAmountSavedSemicolon = findIndexSemicolon(string, indexAmountSaved, 26);
    
    // Are all expected semicolons present?
    if ( (indexGoalSemicolonDeposit != -1) && (indexAmountSavedSemicolon != -1) ) {
      // Now check for correct order
      let correctOrderDeposit = checkOrder(4, indexGoal, indexGoalSemicolonDeposit, indexAmountSaved, indexAmountSavedSemicolon, 5000, 5001);
      if (correctOrderDeposit) {
        return true;
      } else {
        // SEND ERROR MESSAGE - THINGS AREN'T IN THE RIGHT ORDER. GIVE AN EXAMPLE OF WHAT'S EXPECTED.
        return false;
      }
    } else {
      // SEND ERROR MESSAGE - NOT ENOUGH SEMICOLONS
      return false;
    }
  } else { // This condition shouldn't be possible
    api_sendPrivateMessageAlways({"message" : ERROR_MSG_FUNCTION_CHECK_SEMICOLONS, "toUserId" : USER_ID});
  }
}

// Checks if search terms and semicolons are in the correct order. First item should be first (i.e. smallest index), followed by second item, etc.
function checkOrder(numberTerms, first, second, third, fourth, fifth, sixth) {
  if (numberTerms >= 4) {
    if ( (first < second) && (second < third) && (third < fourth) ) {
      if (numberTerms == 4) {
        return true;
      } else if (numberTerms == 6) {
        if ( (fourth < fifth) && (fifth < sixth) ) {
          return true;
        } else {
          return false;
        }
      } else { // This condition shouldn't be possible
        api_sendPrivateMessageAlways({"message" : ERROR_MSG_FUNCTION_CHECK_ORDER, "toUserId" : USER_ID});
      }
    } else {
      return false;
    }
  } else { // This condition shouldn't be possible
    api_sendPrivateMessageAlways({"message" : ERROR_MSG_FUNCTION_CHECK_ORDER, "toUserId" : USER_ID});
  } 
}

// Creates a substring of the characters between the search term and the semicolon, and trims whitespace
function createSubstring(string, startingIndex, endingIndex) {
  var untrimmed = string.substring(startingIndex,endingIndex);
  var trimmed = untrimmed.trim();
  return trimmed;
}

// Checks if the substring is a number
function checkIfNumber(substringToCheck) {
  let substringAsNumber = parseFloat(substringToCheck);
  let isNan =  Number.isNaN(substringAsNumber);
  if (isNan) {
    return false;
  } else {
    return true;
  }
}

// Send a notification as a private message regardless of if they're enabled
function api_sendPrivateMessageAlways(payload) {
  const params = {
    "method" : "post",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
  const url = "https://habitica.com/api/v3/members/send-private-message";
  return UrlFetchApp.fetch(url, params);
}

// Gets user info so I can use it, especially stats like mana, experience, and level
function api_getAuthenticatedUserProfile(userFields) {
  const params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  var url = "https://habitica.com/api/v3/user";
  if (userFields != "") {
    url += "?userFields=" + userFields;
  }

  return UrlFetchApp.fetch(url, params);
}

function api_getUserTasks(type) {
  const params = {
    "method" : "get",
    "headers" : HEADERS,
    "muteHttpExceptions" : true,
  }
  
  var url = "https://habitica.com/api/v3/tasks/user";
  if (type != "") {
    url += "?type=" + type;
  }

  return UrlFetchApp.fetch(url, params);
}

function api_updateUser(payload) { 
  const params = {
    "method" : "put",
    "headers" : HEADERS,
    "contentType" : "application/json",
    "payload" : JSON.stringify(payload),
    "muteHttpExceptions" : true,
  }
  
  const url = "https://habitica.com/api/v3/user";
  return UrlFetchApp.fetch(url, params);
}
